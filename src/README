tamar.weiss,shrafers
323816520,314682022

# Main Regular Expressions

Our s-Java verifier uses several regular expressions for syntax validation.
 Here are two of the most important ones:

1. Variable Declaration Pattern
The regex ^\\s*(final\\s+)?(Types.LEGAL_TYPES)\\s+(IDENTIFIER(?:\\s*=\\s*[^,;]+)?(?:\\s*,
\\s*IDENTIFIER(?:\\s*=\\s*[^,;]+)?)*)\\s*;\\s*$
is used to validate variable declarations in s-Java.
This pattern starts by allowing optional whitespace and a 'final' modifier,
followed by any legal s-Java type. After required whitespace,
it matches a variable name that can be optionally initialized.
The pattern then allows for multiple variables to be declared in
the same line through a comma-separated list. Each additional variable
can also be optionally initialized. The line must end with a semicolon.
This flexible pattern can validate simple declarations like "int x;"
as well as complex ones like "final String name = "hello", title = "Mr";",
making it a crucial part of our syntax validation system.

2. Method Declaration Pattern
The regex ^\\s*void\\s+IDENTIFIER\\s*\\([^)]*\\)\\s*\\{\\s*$
handles method declarations in s-Java.
It begins by matching optional whitespace followed by the mandatory 'void'
keyword (since s-Java only supports void methods). After that,
it requires a valid method name followed by parentheses that can contain any
characters except a closing parenthesis (for parameters).
The pattern ends by matching an opening curly brace,
ensuring proper method syntax. This pattern effectively
validates method declarations ranging from simple ones like
"void main() {" to more complex ones with parameters
like "void processData(final String input) {",
while enforcing s-Java's strict method declaration rules.

These patterns form the foundation of our syntax validation system,
ensuring that variable declarations and method definitions adhere to s-Java's
specifications while being flexible enough to handle all valid variations of these
constructs.